// Code generated by "enumer -type=StateType"; DO NOT EDIT.

package exchange

import (
	"fmt"
)

const _StateTypeName = "ClosedProposedAccepted"

var _StateTypeIndex = [...]uint8{0, 6, 14, 22}

func (i StateType) String() string {
	if i >= StateType(len(_StateTypeIndex)-1) {
		return fmt.Sprintf("StateType(%d)", i)
	}
	return _StateTypeName[_StateTypeIndex[i]:_StateTypeIndex[i+1]]
}

var _StateTypeValues = []StateType{0, 1, 2}

var _StateTypeNameToValueMap = map[string]StateType{
	_StateTypeName[0:6]:   0,
	_StateTypeName[6:14]:  1,
	_StateTypeName[14:22]: 2,
}

// StateTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func StateTypeString(s string) (StateType, error) {
	if val, ok := _StateTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to StateType values", s)
}

// StateTypeValues returns all values of the enum
func StateTypeValues() []StateType {
	return _StateTypeValues
}

// IsAStateType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i StateType) IsAStateType() bool {
	for _, v := range _StateTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

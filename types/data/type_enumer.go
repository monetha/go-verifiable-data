// Code generated by "enumer -type=Type"; DO NOT EDIT.

package data

import (
	"fmt"
)

const _TypeName = "TxDataStringBytesAddressUintIntBool"

var _TypeIndex = [...]uint8{0, 6, 12, 17, 24, 28, 31, 35}

func (i Type) String() string {
	if i >= Type(len(_TypeIndex)-1) {
		return fmt.Sprintf("Type(%d)", i)
	}
	return _TypeName[_TypeIndex[i]:_TypeIndex[i+1]]
}

var _TypeValues = []Type{0, 1, 2, 3, 4, 5, 6}

var _TypeNameToValueMap = map[string]Type{
	_TypeName[0:6]:   0,
	_TypeName[6:12]:  1,
	_TypeName[12:17]: 2,
	_TypeName[17:24]: 3,
	_TypeName[24:28]: 4,
	_TypeName[28:31]: 5,
	_TypeName[31:35]: 6,
}

// TypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func TypeString(s string) (Type, error) {
	if val, ok := _TypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Type values", s)
}

// TypeValues returns all values of the enum
func TypeValues() []Type {
	return _TypeValues
}

// IsAType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Type) IsAType() bool {
	for _, v := range _TypeValues {
		if i == v {
			return true
		}
	}
	return false
}
